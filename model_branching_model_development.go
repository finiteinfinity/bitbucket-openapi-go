/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"encoding/json"
)

// BranchingModelDevelopment struct for BranchingModelDevelopment
type BranchingModelDevelopment struct {
	Branch *Branch `json:"branch,omitempty"`
	// Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.
	Name string `json:"name"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).
	UseMainbranch bool `json:"use_mainbranch"`
	// Indicates if the indicated branch exists on the repository (`false`)or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.
	BranchDoesNotExist *bool `json:"branch_does_not_exist,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BranchingModelDevelopment BranchingModelDevelopment

// NewBranchingModelDevelopment instantiates a new BranchingModelDevelopment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranchingModelDevelopment(name string, useMainbranch bool) *BranchingModelDevelopment {
	this := BranchingModelDevelopment{}
	this.Name = name
	this.UseMainbranch = useMainbranch
	return &this
}

// NewBranchingModelDevelopmentWithDefaults instantiates a new BranchingModelDevelopment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchingModelDevelopmentWithDefaults() *BranchingModelDevelopment {
	this := BranchingModelDevelopment{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *BranchingModelDevelopment) GetBranch() Branch {
	if o == nil || o.Branch == nil {
		var ret Branch
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchingModelDevelopment) GetBranchOk() (*Branch, bool) {
	if o == nil || o.Branch == nil {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *BranchingModelDevelopment) HasBranch() bool {
	if o != nil && o.Branch != nil {
		return true
	}

	return false
}

// SetBranch gets a reference to the given Branch and assigns it to the Branch field.
func (o *BranchingModelDevelopment) SetBranch(v Branch) {
	o.Branch = &v
}

// GetName returns the Name field value
func (o *BranchingModelDevelopment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BranchingModelDevelopment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BranchingModelDevelopment) SetName(v string) {
	o.Name = v
}

// GetUseMainbranch returns the UseMainbranch field value
func (o *BranchingModelDevelopment) GetUseMainbranch() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseMainbranch
}

// GetUseMainbranchOk returns a tuple with the UseMainbranch field value
// and a boolean to check if the value has been set.
func (o *BranchingModelDevelopment) GetUseMainbranchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseMainbranch, true
}

// SetUseMainbranch sets field value
func (o *BranchingModelDevelopment) SetUseMainbranch(v bool) {
	o.UseMainbranch = v
}

// GetBranchDoesNotExist returns the BranchDoesNotExist field value if set, zero value otherwise.
func (o *BranchingModelDevelopment) GetBranchDoesNotExist() bool {
	if o == nil || o.BranchDoesNotExist == nil {
		var ret bool
		return ret
	}
	return *o.BranchDoesNotExist
}

// GetBranchDoesNotExistOk returns a tuple with the BranchDoesNotExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchingModelDevelopment) GetBranchDoesNotExistOk() (*bool, bool) {
	if o == nil || o.BranchDoesNotExist == nil {
		return nil, false
	}
	return o.BranchDoesNotExist, true
}

// HasBranchDoesNotExist returns a boolean if a field has been set.
func (o *BranchingModelDevelopment) HasBranchDoesNotExist() bool {
	if o != nil && o.BranchDoesNotExist != nil {
		return true
	}

	return false
}

// SetBranchDoesNotExist gets a reference to the given bool and assigns it to the BranchDoesNotExist field.
func (o *BranchingModelDevelopment) SetBranchDoesNotExist(v bool) {
	o.BranchDoesNotExist = &v
}

func (o BranchingModelDevelopment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Branch != nil {
		toSerialize["branch"] = o.Branch
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["use_mainbranch"] = o.UseMainbranch
	}
	if o.BranchDoesNotExist != nil {
		toSerialize["branch_does_not_exist"] = o.BranchDoesNotExist
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BranchingModelDevelopment) UnmarshalJSON(bytes []byte) (err error) {
	varBranchingModelDevelopment := _BranchingModelDevelopment{}

	if err = json.Unmarshal(bytes, &varBranchingModelDevelopment); err == nil {
		*o = BranchingModelDevelopment(varBranchingModelDevelopment)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "branch")
		delete(additionalProperties, "name")
		delete(additionalProperties, "use_mainbranch")
		delete(additionalProperties, "branch_does_not_exist")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBranchingModelDevelopment struct {
	value *BranchingModelDevelopment
	isSet bool
}

func (v NullableBranchingModelDevelopment) Get() *BranchingModelDevelopment {
	return v.value
}

func (v *NullableBranchingModelDevelopment) Set(val *BranchingModelDevelopment) {
	v.value = val
	v.isSet = true
}

func (v NullableBranchingModelDevelopment) IsSet() bool {
	return v.isSet
}

func (v *NullableBranchingModelDevelopment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranchingModelDevelopment(val *BranchingModelDevelopment) *NullableBranchingModelDevelopment {
	return &NullableBranchingModelDevelopment{value: val, isSet: true}
}

func (v NullableBranchingModelDevelopment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranchingModelDevelopment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"encoding/json"
)

// ApplicationProperty An application property. It is a caller defined JSON object that Bitbucket will store and return.  The `_attributes` field at its top level can be used to control who is allowed to read and update the property.  The keys of the JSON object must match an allowed pattern. For details,  see [Application properties](/cloud/bitbucket/application-properties/). 
type ApplicationProperty struct {
	Attributes []string `json:"_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplicationProperty ApplicationProperty

// NewApplicationProperty instantiates a new ApplicationProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationProperty() *ApplicationProperty {
	this := ApplicationProperty{}
	return &this
}

// NewApplicationPropertyWithDefaults instantiates a new ApplicationProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationPropertyWithDefaults() *ApplicationProperty {
	this := ApplicationProperty{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ApplicationProperty) GetAttributes() []string {
	if o == nil || o.Attributes == nil {
		var ret []string
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationProperty) GetAttributesOk() ([]string, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ApplicationProperty) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []string and assigns it to the Attributes field.
func (o *ApplicationProperty) SetAttributes(v []string) {
	o.Attributes = v
}

func (o ApplicationProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attributes != nil {
		toSerialize["_attributes"] = o.Attributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ApplicationProperty) UnmarshalJSON(bytes []byte) (err error) {
	varApplicationProperty := _ApplicationProperty{}

	if err = json.Unmarshal(bytes, &varApplicationProperty); err == nil {
		*o = ApplicationProperty(varApplicationProperty)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplicationProperty struct {
	value *ApplicationProperty
	isSet bool
}

func (v NullableApplicationProperty) Get() *ApplicationProperty {
	return v.value
}

func (v *NullableApplicationProperty) Set(val *ApplicationProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationProperty(val *ApplicationProperty) *NullableApplicationProperty {
	return &NullableApplicationProperty{value: val, isSet: true}
}

func (v NullableApplicationProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



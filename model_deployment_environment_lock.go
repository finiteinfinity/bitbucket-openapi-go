/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"encoding/json"
)

// DeploymentEnvironmentLock A Bitbucket Deployment Environment Lock.
type DeploymentEnvironmentLock struct {
	// The UUID identifying the environment.
	EnvironmentUuid *string `json:"environmentUuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentEnvironmentLock DeploymentEnvironmentLock

// NewDeploymentEnvironmentLock instantiates a new DeploymentEnvironmentLock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentEnvironmentLock() *DeploymentEnvironmentLock {
	this := DeploymentEnvironmentLock{}
	return &this
}

// NewDeploymentEnvironmentLockWithDefaults instantiates a new DeploymentEnvironmentLock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentEnvironmentLockWithDefaults() *DeploymentEnvironmentLock {
	this := DeploymentEnvironmentLock{}
	return &this
}

// GetEnvironmentUuid returns the EnvironmentUuid field value if set, zero value otherwise.
func (o *DeploymentEnvironmentLock) GetEnvironmentUuid() string {
	if o == nil || o.EnvironmentUuid == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentUuid
}

// GetEnvironmentUuidOk returns a tuple with the EnvironmentUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentEnvironmentLock) GetEnvironmentUuidOk() (*string, bool) {
	if o == nil || o.EnvironmentUuid == nil {
		return nil, false
	}
	return o.EnvironmentUuid, true
}

// HasEnvironmentUuid returns a boolean if a field has been set.
func (o *DeploymentEnvironmentLock) HasEnvironmentUuid() bool {
	if o != nil && o.EnvironmentUuid != nil {
		return true
	}

	return false
}

// SetEnvironmentUuid gets a reference to the given string and assigns it to the EnvironmentUuid field.
func (o *DeploymentEnvironmentLock) SetEnvironmentUuid(v string) {
	o.EnvironmentUuid = &v
}

func (o DeploymentEnvironmentLock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnvironmentUuid != nil {
		toSerialize["environmentUuid"] = o.EnvironmentUuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeploymentEnvironmentLock) UnmarshalJSON(bytes []byte) (err error) {
	varDeploymentEnvironmentLock := _DeploymentEnvironmentLock{}

	if err = json.Unmarshal(bytes, &varDeploymentEnvironmentLock); err == nil {
		*o = DeploymentEnvironmentLock(varDeploymentEnvironmentLock)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "environmentUuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentEnvironmentLock struct {
	value *DeploymentEnvironmentLock
	isSet bool
}

func (v NullableDeploymentEnvironmentLock) Get() *DeploymentEnvironmentLock {
	return v.value
}

func (v *NullableDeploymentEnvironmentLock) Set(val *DeploymentEnvironmentLock) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentEnvironmentLock) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentEnvironmentLock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentEnvironmentLock(val *DeploymentEnvironmentLock) *NullableDeploymentEnvironmentLock {
	return &NullableDeploymentEnvironmentLock{value: val, isSet: true}
}

func (v NullableDeploymentEnvironmentLock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentEnvironmentLock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// PropertiesApiService PropertiesApi service
type PropertiesApiService service

type PropertiesApiDeleteCommitHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	workspace string
	repoSlug string
	commit string
	appKey string
	propertyName string
}

func (r PropertiesApiDeleteCommitHostedPropertyValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCommitHostedPropertyValueExecute(r)
}

/*
DeleteCommitHostedPropertyValue Delete a commit application property

Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 @param repoSlug The repository.
 @param commit The commit.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiDeleteCommitHostedPropertyValueRequest
*/
func (a *PropertiesApiService) DeleteCommitHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string) PropertiesApiDeleteCommitHostedPropertyValueRequest {
	return PropertiesApiDeleteCommitHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		commit: commit,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
func (a *PropertiesApiService) DeleteCommitHostedPropertyValueExecute(r PropertiesApiDeleteCommitHostedPropertyValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.DeleteCommitHostedPropertyValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", url.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", url.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"commit"+"}", url.PathEscape(parameterToString(r.commit, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiDeletePullRequestHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	workspace string
	repoSlug string
	pullrequestId string
	appKey string
	propertyName string
}

func (r PropertiesApiDeletePullRequestHostedPropertyValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePullRequestHostedPropertyValueExecute(r)
}

/*
DeletePullRequestHostedPropertyValue Delete a pull request application property

Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 @param repoSlug The repository.
 @param pullrequestId The pull request ID.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiDeletePullRequestHostedPropertyValueRequest
*/
func (a *PropertiesApiService) DeletePullRequestHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) PropertiesApiDeletePullRequestHostedPropertyValueRequest {
	return PropertiesApiDeletePullRequestHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		pullrequestId: pullrequestId,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
func (a *PropertiesApiService) DeletePullRequestHostedPropertyValueExecute(r PropertiesApiDeletePullRequestHostedPropertyValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.DeletePullRequestHostedPropertyValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", url.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", url.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pullrequest_id"+"}", url.PathEscape(parameterToString(r.pullrequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiDeleteRepositoryHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	workspace string
	repoSlug string
	appKey string
	propertyName string
}

func (r PropertiesApiDeleteRepositoryHostedPropertyValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRepositoryHostedPropertyValueExecute(r)
}

/*
DeleteRepositoryHostedPropertyValue Delete a repository application property

Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 @param repoSlug The repository.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiDeleteRepositoryHostedPropertyValueRequest
*/
func (a *PropertiesApiService) DeleteRepositoryHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string) PropertiesApiDeleteRepositoryHostedPropertyValueRequest {
	return PropertiesApiDeleteRepositoryHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
func (a *PropertiesApiService) DeleteRepositoryHostedPropertyValueExecute(r PropertiesApiDeleteRepositoryHostedPropertyValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.DeleteRepositoryHostedPropertyValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", url.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", url.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiDeleteUserHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	selectedUser string
	appKey string
	propertyName string
}

func (r PropertiesApiDeleteUserHostedPropertyValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUserHostedPropertyValueExecute(r)
}

/*
DeleteUserHostedPropertyValue Delete a user application property

Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiDeleteUserHostedPropertyValueRequest
*/
func (a *PropertiesApiService) DeleteUserHostedPropertyValue(ctx context.Context, selectedUser string, appKey string, propertyName string) PropertiesApiDeleteUserHostedPropertyValueRequest {
	return PropertiesApiDeleteUserHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		selectedUser: selectedUser,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
func (a *PropertiesApiService) DeleteUserHostedPropertyValueExecute(r PropertiesApiDeleteUserHostedPropertyValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.DeleteUserHostedPropertyValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{selected_user}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"selected_user"+"}", url.PathEscape(parameterToString(r.selectedUser, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiGetCommitHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	workspace string
	repoSlug string
	commit string
	appKey string
	propertyName string
}

func (r PropertiesApiGetCommitHostedPropertyValueRequest) Execute() (*ApplicationProperty, *http.Response, error) {
	return r.ApiService.GetCommitHostedPropertyValueExecute(r)
}

/*
GetCommitHostedPropertyValue Get a commit application property

Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 @param repoSlug The repository.
 @param commit The commit.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiGetCommitHostedPropertyValueRequest
*/
func (a *PropertiesApiService) GetCommitHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string) PropertiesApiGetCommitHostedPropertyValueRequest {
	return PropertiesApiGetCommitHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		commit: commit,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
//  @return ApplicationProperty
func (a *PropertiesApiService) GetCommitHostedPropertyValueExecute(r PropertiesApiGetCommitHostedPropertyValueRequest) (*ApplicationProperty, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.GetCommitHostedPropertyValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", url.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", url.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"commit"+"}", url.PathEscape(parameterToString(r.commit, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PropertiesApiGetPullRequestHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	workspace string
	repoSlug string
	pullrequestId string
	appKey string
	propertyName string
}

func (r PropertiesApiGetPullRequestHostedPropertyValueRequest) Execute() (*ApplicationProperty, *http.Response, error) {
	return r.ApiService.GetPullRequestHostedPropertyValueExecute(r)
}

/*
GetPullRequestHostedPropertyValue Get a pull request application property

Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 @param repoSlug The repository.
 @param pullrequestId The pull request ID.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiGetPullRequestHostedPropertyValueRequest
*/
func (a *PropertiesApiService) GetPullRequestHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) PropertiesApiGetPullRequestHostedPropertyValueRequest {
	return PropertiesApiGetPullRequestHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		pullrequestId: pullrequestId,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
//  @return ApplicationProperty
func (a *PropertiesApiService) GetPullRequestHostedPropertyValueExecute(r PropertiesApiGetPullRequestHostedPropertyValueRequest) (*ApplicationProperty, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.GetPullRequestHostedPropertyValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", url.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", url.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pullrequest_id"+"}", url.PathEscape(parameterToString(r.pullrequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PropertiesApiGetRepositoryHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	workspace string
	repoSlug string
	appKey string
	propertyName string
}

func (r PropertiesApiGetRepositoryHostedPropertyValueRequest) Execute() (*ApplicationProperty, *http.Response, error) {
	return r.ApiService.GetRepositoryHostedPropertyValueExecute(r)
}

/*
GetRepositoryHostedPropertyValue Get a repository application property

Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 @param repoSlug The repository.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiGetRepositoryHostedPropertyValueRequest
*/
func (a *PropertiesApiService) GetRepositoryHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string) PropertiesApiGetRepositoryHostedPropertyValueRequest {
	return PropertiesApiGetRepositoryHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
//  @return ApplicationProperty
func (a *PropertiesApiService) GetRepositoryHostedPropertyValueExecute(r PropertiesApiGetRepositoryHostedPropertyValueRequest) (*ApplicationProperty, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.GetRepositoryHostedPropertyValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", url.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", url.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PropertiesApiRetrieveUserHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	selectedUser string
	appKey string
	propertyName string
}

func (r PropertiesApiRetrieveUserHostedPropertyValueRequest) Execute() (*ApplicationProperty, *http.Response, error) {
	return r.ApiService.RetrieveUserHostedPropertyValueExecute(r)
}

/*
RetrieveUserHostedPropertyValue Get a user application property

Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiRetrieveUserHostedPropertyValueRequest
*/
func (a *PropertiesApiService) RetrieveUserHostedPropertyValue(ctx context.Context, selectedUser string, appKey string, propertyName string) PropertiesApiRetrieveUserHostedPropertyValueRequest {
	return PropertiesApiRetrieveUserHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		selectedUser: selectedUser,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
//  @return ApplicationProperty
func (a *PropertiesApiService) RetrieveUserHostedPropertyValueExecute(r PropertiesApiRetrieveUserHostedPropertyValueRequest) (*ApplicationProperty, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.RetrieveUserHostedPropertyValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{selected_user}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"selected_user"+"}", url.PathEscape(parameterToString(r.selectedUser, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PropertiesApiUpdateCommitHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	workspace string
	repoSlug string
	commit string
	appKey string
	propertyName string
	body *ApplicationProperty
}

// The application property to create or update.
func (r PropertiesApiUpdateCommitHostedPropertyValueRequest) Body(body ApplicationProperty) PropertiesApiUpdateCommitHostedPropertyValueRequest {
	r.body = &body
	return r
}

func (r PropertiesApiUpdateCommitHostedPropertyValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCommitHostedPropertyValueExecute(r)
}

/*
UpdateCommitHostedPropertyValue Update a commit application property

Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 @param repoSlug The repository.
 @param commit The commit.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiUpdateCommitHostedPropertyValueRequest
*/
func (a *PropertiesApiService) UpdateCommitHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string) PropertiesApiUpdateCommitHostedPropertyValueRequest {
	return PropertiesApiUpdateCommitHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		commit: commit,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
func (a *PropertiesApiService) UpdateCommitHostedPropertyValueExecute(r PropertiesApiUpdateCommitHostedPropertyValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.UpdateCommitHostedPropertyValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", url.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", url.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"commit"+"}", url.PathEscape(parameterToString(r.commit, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiUpdatePullRequestHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	workspace string
	repoSlug string
	pullrequestId string
	appKey string
	propertyName string
	body *ApplicationProperty
}

// The application property to create or update.
func (r PropertiesApiUpdatePullRequestHostedPropertyValueRequest) Body(body ApplicationProperty) PropertiesApiUpdatePullRequestHostedPropertyValueRequest {
	r.body = &body
	return r
}

func (r PropertiesApiUpdatePullRequestHostedPropertyValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdatePullRequestHostedPropertyValueExecute(r)
}

/*
UpdatePullRequestHostedPropertyValue Update a pull request application property

Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 @param repoSlug The repository.
 @param pullrequestId The pull request ID.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiUpdatePullRequestHostedPropertyValueRequest
*/
func (a *PropertiesApiService) UpdatePullRequestHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) PropertiesApiUpdatePullRequestHostedPropertyValueRequest {
	return PropertiesApiUpdatePullRequestHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		pullrequestId: pullrequestId,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
func (a *PropertiesApiService) UpdatePullRequestHostedPropertyValueExecute(r PropertiesApiUpdatePullRequestHostedPropertyValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.UpdatePullRequestHostedPropertyValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", url.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", url.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pullrequest_id"+"}", url.PathEscape(parameterToString(r.pullrequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiUpdateRepositoryHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	workspace string
	repoSlug string
	appKey string
	propertyName string
	body *ApplicationProperty
}

// The application property to create or update.
func (r PropertiesApiUpdateRepositoryHostedPropertyValueRequest) Body(body ApplicationProperty) PropertiesApiUpdateRepositoryHostedPropertyValueRequest {
	r.body = &body
	return r
}

func (r PropertiesApiUpdateRepositoryHostedPropertyValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateRepositoryHostedPropertyValueExecute(r)
}

/*
UpdateRepositoryHostedPropertyValue Update a repository application property

Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspace The repository container; either the workspace slug or the UUID in curly braces.
 @param repoSlug The repository.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiUpdateRepositoryHostedPropertyValueRequest
*/
func (a *PropertiesApiService) UpdateRepositoryHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string) PropertiesApiUpdateRepositoryHostedPropertyValueRequest {
	return PropertiesApiUpdateRepositoryHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		workspace: workspace,
		repoSlug: repoSlug,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
func (a *PropertiesApiService) UpdateRepositoryHostedPropertyValueExecute(r PropertiesApiUpdateRepositoryHostedPropertyValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.UpdateRepositoryHostedPropertyValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace"+"}", url.PathEscape(parameterToString(r.workspace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo_slug"+"}", url.PathEscape(parameterToString(r.repoSlug, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PropertiesApiUpdateUserHostedPropertyValueRequest struct {
	ctx context.Context
	ApiService *PropertiesApiService
	selectedUser string
	appKey string
	propertyName string
	body *ApplicationProperty
}

// The application property to create or update.
func (r PropertiesApiUpdateUserHostedPropertyValueRequest) Body(body ApplicationProperty) PropertiesApiUpdateUserHostedPropertyValueRequest {
	r.body = &body
	return r
}

func (r PropertiesApiUpdateUserHostedPropertyValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateUserHostedPropertyValueExecute(r)
}

/*
UpdateUserHostedPropertyValue Update a user application property

Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
 @param appKey The key of the Connect app.
 @param propertyName The name of the property.
 @return PropertiesApiUpdateUserHostedPropertyValueRequest
*/
func (a *PropertiesApiService) UpdateUserHostedPropertyValue(ctx context.Context, selectedUser string, appKey string, propertyName string) PropertiesApiUpdateUserHostedPropertyValueRequest {
	return PropertiesApiUpdateUserHostedPropertyValueRequest{
		ApiService: a,
		ctx: ctx,
		selectedUser: selectedUser,
		appKey: appKey,
		propertyName: propertyName,
	}
}

// Execute executes the request
func (a *PropertiesApiService) UpdateUserHostedPropertyValueExecute(r PropertiesApiUpdateUserHostedPropertyValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PropertiesApiService.UpdateUserHostedPropertyValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{selected_user}/properties/{app_key}/{property_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"selected_user"+"}", url.PathEscape(parameterToString(r.selectedUser, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"app_key"+"}", url.PathEscape(parameterToString(r.appKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"property_name"+"}", url.PathEscape(parameterToString(r.propertyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

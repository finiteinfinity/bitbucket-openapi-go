/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"encoding/json"
)

// RenderedPullRequestMarkupTitle struct for RenderedPullRequestMarkupTitle
type RenderedPullRequestMarkupTitle struct {
	// The text as it was typed by a user.
	Raw *string `json:"raw,omitempty"`
	// The type of markup language the raw content is to be interpreted in.
	Markup *string `json:"markup,omitempty"`
	// The user's content rendered as HTML.
	Html *string `json:"html,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RenderedPullRequestMarkupTitle RenderedPullRequestMarkupTitle

// NewRenderedPullRequestMarkupTitle instantiates a new RenderedPullRequestMarkupTitle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenderedPullRequestMarkupTitle() *RenderedPullRequestMarkupTitle {
	this := RenderedPullRequestMarkupTitle{}
	return &this
}

// NewRenderedPullRequestMarkupTitleWithDefaults instantiates a new RenderedPullRequestMarkupTitle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenderedPullRequestMarkupTitleWithDefaults() *RenderedPullRequestMarkupTitle {
	this := RenderedPullRequestMarkupTitle{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *RenderedPullRequestMarkupTitle) GetRaw() string {
	if o == nil || o.Raw == nil {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderedPullRequestMarkupTitle) GetRawOk() (*string, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *RenderedPullRequestMarkupTitle) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *RenderedPullRequestMarkupTitle) SetRaw(v string) {
	o.Raw = &v
}

// GetMarkup returns the Markup field value if set, zero value otherwise.
func (o *RenderedPullRequestMarkupTitle) GetMarkup() string {
	if o == nil || o.Markup == nil {
		var ret string
		return ret
	}
	return *o.Markup
}

// GetMarkupOk returns a tuple with the Markup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderedPullRequestMarkupTitle) GetMarkupOk() (*string, bool) {
	if o == nil || o.Markup == nil {
		return nil, false
	}
	return o.Markup, true
}

// HasMarkup returns a boolean if a field has been set.
func (o *RenderedPullRequestMarkupTitle) HasMarkup() bool {
	if o != nil && o.Markup != nil {
		return true
	}

	return false
}

// SetMarkup gets a reference to the given string and assigns it to the Markup field.
func (o *RenderedPullRequestMarkupTitle) SetMarkup(v string) {
	o.Markup = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *RenderedPullRequestMarkupTitle) GetHtml() string {
	if o == nil || o.Html == nil {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderedPullRequestMarkupTitle) GetHtmlOk() (*string, bool) {
	if o == nil || o.Html == nil {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *RenderedPullRequestMarkupTitle) HasHtml() bool {
	if o != nil && o.Html != nil {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *RenderedPullRequestMarkupTitle) SetHtml(v string) {
	o.Html = &v
}

func (o RenderedPullRequestMarkupTitle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	if o.Markup != nil {
		toSerialize["markup"] = o.Markup
	}
	if o.Html != nil {
		toSerialize["html"] = o.Html
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *RenderedPullRequestMarkupTitle) UnmarshalJSON(bytes []byte) (err error) {
	varRenderedPullRequestMarkupTitle := _RenderedPullRequestMarkupTitle{}

	if err = json.Unmarshal(bytes, &varRenderedPullRequestMarkupTitle); err == nil {
		*o = RenderedPullRequestMarkupTitle(varRenderedPullRequestMarkupTitle)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "raw")
		delete(additionalProperties, "markup")
		delete(additionalProperties, "html")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRenderedPullRequestMarkupTitle struct {
	value *RenderedPullRequestMarkupTitle
	isSet bool
}

func (v NullableRenderedPullRequestMarkupTitle) Get() *RenderedPullRequestMarkupTitle {
	return v.value
}

func (v *NullableRenderedPullRequestMarkupTitle) Set(val *RenderedPullRequestMarkupTitle) {
	v.value = val
	v.isSet = true
}

func (v NullableRenderedPullRequestMarkupTitle) IsSet() bool {
	return v.isSet
}

func (v *NullableRenderedPullRequestMarkupTitle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenderedPullRequestMarkupTitle(val *RenderedPullRequestMarkupTitle) *NullableRenderedPullRequestMarkupTitle {
	return &NullableRenderedPullRequestMarkupTitle{value: val, isSet: true}
}

func (v NullableRenderedPullRequestMarkupTitle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenderedPullRequestMarkupTitle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



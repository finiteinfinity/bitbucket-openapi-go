/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"encoding/json"
)

// PipelineStepError An error causing a step failure.
type PipelineStepError struct {
	// The error key.
	Key *string `json:"key,omitempty"`
	// The error message.
	Message *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PipelineStepError PipelineStepError

// NewPipelineStepError instantiates a new PipelineStepError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineStepError() *PipelineStepError {
	this := PipelineStepError{}
	return &this
}

// NewPipelineStepErrorWithDefaults instantiates a new PipelineStepError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineStepErrorWithDefaults() *PipelineStepError {
	this := PipelineStepError{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PipelineStepError) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStepError) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PipelineStepError) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *PipelineStepError) SetKey(v string) {
	o.Key = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PipelineStepError) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStepError) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PipelineStepError) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PipelineStepError) SetMessage(v string) {
	o.Message = &v
}

func (o PipelineStepError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PipelineStepError) UnmarshalJSON(bytes []byte) (err error) {
	varPipelineStepError := _PipelineStepError{}

	if err = json.Unmarshal(bytes, &varPipelineStepError); err == nil {
		*o = PipelineStepError(varPipelineStepError)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePipelineStepError struct {
	value *PipelineStepError
	isSet bool
}

func (v NullablePipelineStepError) Get() *PipelineStepError {
	return v.value
}

func (v *NullablePipelineStepError) Set(val *PipelineStepError) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineStepError) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineStepError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineStepError(val *PipelineStepError) *NullablePipelineStepError {
	return &NullablePipelineStepError{value: val, isSet: true}
}

func (v NullablePipelineStepError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineStepError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"encoding/json"
	"reflect"
	"strings"
)

// PipelineState struct for PipelineState
type PipelineState struct {
	Object
	AdditionalProperties map[string]interface{}
}

type _PipelineState PipelineState

// NewPipelineState instantiates a new PipelineState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineState() *PipelineState {
	this := PipelineState{}
	return &this
}

// NewPipelineStateWithDefaults instantiates a new PipelineState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineStateWithDefaults() *PipelineState {
	this := PipelineState{}
	return &this
}

func (o PipelineState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedObject, errObject := json.Marshal(o.Object)
	if errObject != nil {
		return []byte{}, errObject
	}
	errObject = json.Unmarshal([]byte(serializedObject), &toSerialize)
	if errObject != nil {
		return []byte{}, errObject
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PipelineState) UnmarshalJSON(bytes []byte) (err error) {
	type PipelineStateWithoutEmbeddedStruct struct {
	}

	varPipelineStateWithoutEmbeddedStruct := PipelineStateWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varPipelineStateWithoutEmbeddedStruct)
	if err == nil {
		varPipelineState := _PipelineState{}
		*o = PipelineState(varPipelineState)
	} else {
		return err
	}

	varPipelineState := _PipelineState{}

	err = json.Unmarshal(bytes, &varPipelineState)
	if err == nil {
		o.Object = varPipelineState.Object
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {

		// remove fields from embedded structs
		reflectObject := reflect.ValueOf(o.Object)
		for i := 0; i < reflectObject.Type().NumField(); i++ {
			t := reflectObject.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePipelineState struct {
	value *PipelineState
	isSet bool
}

func (v NullablePipelineState) Get() *PipelineState {
	return v.value
}

func (v *NullablePipelineState) Set(val *PipelineState) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineState) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineState(val *PipelineState) *NullablePipelineState {
	return &NullablePipelineState{value: val, isSet: true}
}

func (v NullablePipelineState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"encoding/json"
)

// Branch A branch object, representing a branch in a repository.
type Branch struct {
	// Available merge strategies for pull requests targeting this branch.
	MergeStrategies []string `json:"merge_strategies,omitempty"`
	// The default merge strategy for pull requests targeting this branch.
	DefaultMergeStrategy *string `json:"default_merge_strategy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Branch Branch

// NewBranch instantiates a new Branch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranch() *Branch {
	this := Branch{}
	return &this
}

// NewBranchWithDefaults instantiates a new Branch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchWithDefaults() *Branch {
	this := Branch{}
	return &this
}

// GetMergeStrategies returns the MergeStrategies field value if set, zero value otherwise.
func (o *Branch) GetMergeStrategies() []string {
	if o == nil || o.MergeStrategies == nil {
		var ret []string
		return ret
	}
	return o.MergeStrategies
}

// GetMergeStrategiesOk returns a tuple with the MergeStrategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetMergeStrategiesOk() ([]string, bool) {
	if o == nil || o.MergeStrategies == nil {
		return nil, false
	}
	return o.MergeStrategies, true
}

// HasMergeStrategies returns a boolean if a field has been set.
func (o *Branch) HasMergeStrategies() bool {
	if o != nil && o.MergeStrategies != nil {
		return true
	}

	return false
}

// SetMergeStrategies gets a reference to the given []string and assigns it to the MergeStrategies field.
func (o *Branch) SetMergeStrategies(v []string) {
	o.MergeStrategies = v
}

// GetDefaultMergeStrategy returns the DefaultMergeStrategy field value if set, zero value otherwise.
func (o *Branch) GetDefaultMergeStrategy() string {
	if o == nil || o.DefaultMergeStrategy == nil {
		var ret string
		return ret
	}
	return *o.DefaultMergeStrategy
}

// GetDefaultMergeStrategyOk returns a tuple with the DefaultMergeStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetDefaultMergeStrategyOk() (*string, bool) {
	if o == nil || o.DefaultMergeStrategy == nil {
		return nil, false
	}
	return o.DefaultMergeStrategy, true
}

// HasDefaultMergeStrategy returns a boolean if a field has been set.
func (o *Branch) HasDefaultMergeStrategy() bool {
	if o != nil && o.DefaultMergeStrategy != nil {
		return true
	}

	return false
}

// SetDefaultMergeStrategy gets a reference to the given string and assigns it to the DefaultMergeStrategy field.
func (o *Branch) SetDefaultMergeStrategy(v string) {
	o.DefaultMergeStrategy = &v
}

func (o Branch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MergeStrategies != nil {
		toSerialize["merge_strategies"] = o.MergeStrategies
	}
	if o.DefaultMergeStrategy != nil {
		toSerialize["default_merge_strategy"] = o.DefaultMergeStrategy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Branch) UnmarshalJSON(bytes []byte) (err error) {
	varBranch := _Branch{}

	if err = json.Unmarshal(bytes, &varBranch); err == nil {
		*o = Branch(varBranch)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "merge_strategies")
		delete(additionalProperties, "default_merge_strategy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBranch struct {
	value *Branch
	isSet bool
}

func (v NullableBranch) Get() *Branch {
	return v.value
}

func (v *NullableBranch) Set(val *Branch) {
	v.value = val
	v.isSet = true
}

func (v NullableBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranch(val *Branch) *NullableBranch {
	return &NullableBranch{value: val, isSet: true}
}

func (v NullableBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



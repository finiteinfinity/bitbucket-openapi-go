/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"encoding/json"
	"reflect"
	"strings"
)

// PipelineStateCompletedSuccessful struct for PipelineStateCompletedSuccessful
type PipelineStateCompletedSuccessful struct {
	PipelineStateCompletedResult
	// The name of the successful result (SUCCESSFUL).
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PipelineStateCompletedSuccessful PipelineStateCompletedSuccessful

// NewPipelineStateCompletedSuccessful instantiates a new PipelineStateCompletedSuccessful object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineStateCompletedSuccessful() *PipelineStateCompletedSuccessful {
	this := PipelineStateCompletedSuccessful{}
	return &this
}

// NewPipelineStateCompletedSuccessfulWithDefaults instantiates a new PipelineStateCompletedSuccessful object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineStateCompletedSuccessfulWithDefaults() *PipelineStateCompletedSuccessful {
	this := PipelineStateCompletedSuccessful{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PipelineStateCompletedSuccessful) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStateCompletedSuccessful) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PipelineStateCompletedSuccessful) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PipelineStateCompletedSuccessful) SetName(v string) {
	o.Name = &v
}

func (o PipelineStateCompletedSuccessful) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedPipelineStateCompletedResult, errPipelineStateCompletedResult := json.Marshal(o.PipelineStateCompletedResult)
	if errPipelineStateCompletedResult != nil {
		return []byte{}, errPipelineStateCompletedResult
	}
	errPipelineStateCompletedResult = json.Unmarshal([]byte(serializedPipelineStateCompletedResult), &toSerialize)
	if errPipelineStateCompletedResult != nil {
		return []byte{}, errPipelineStateCompletedResult
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PipelineStateCompletedSuccessful) UnmarshalJSON(bytes []byte) (err error) {
	type PipelineStateCompletedSuccessfulWithoutEmbeddedStruct struct {
		// The name of the successful result (SUCCESSFUL).
		Name *string `json:"name,omitempty"`
	}

	varPipelineStateCompletedSuccessfulWithoutEmbeddedStruct := PipelineStateCompletedSuccessfulWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varPipelineStateCompletedSuccessfulWithoutEmbeddedStruct)
	if err == nil {
		varPipelineStateCompletedSuccessful := _PipelineStateCompletedSuccessful{}
		varPipelineStateCompletedSuccessful.Name = varPipelineStateCompletedSuccessfulWithoutEmbeddedStruct.Name
		*o = PipelineStateCompletedSuccessful(varPipelineStateCompletedSuccessful)
	} else {
		return err
	}

	varPipelineStateCompletedSuccessful := _PipelineStateCompletedSuccessful{}

	err = json.Unmarshal(bytes, &varPipelineStateCompletedSuccessful)
	if err == nil {
		o.PipelineStateCompletedResult = varPipelineStateCompletedSuccessful.PipelineStateCompletedResult
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")

		// remove fields from embedded structs
		reflectPipelineStateCompletedResult := reflect.ValueOf(o.PipelineStateCompletedResult)
		for i := 0; i < reflectPipelineStateCompletedResult.Type().NumField(); i++ {
			t := reflectPipelineStateCompletedResult.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePipelineStateCompletedSuccessful struct {
	value *PipelineStateCompletedSuccessful
	isSet bool
}

func (v NullablePipelineStateCompletedSuccessful) Get() *PipelineStateCompletedSuccessful {
	return v.value
}

func (v *NullablePipelineStateCompletedSuccessful) Set(val *PipelineStateCompletedSuccessful) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineStateCompletedSuccessful) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineStateCompletedSuccessful) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineStateCompletedSuccessful(val *PipelineStateCompletedSuccessful) *NullablePipelineStateCompletedSuccessful {
	return &NullablePipelineStateCompletedSuccessful{value: val, isSet: true}
}

func (v NullablePipelineStateCompletedSuccessful) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineStateCompletedSuccessful) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Bitbucket API

Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.

API version: 2.0
Contact: support@bitbucket.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucket

import (
	"encoding/json"
)

// PipelinesConfiguration The Pipelines configuration for a repository.
type PipelinesConfiguration struct {
	// Whether Pipelines is enabled for the repository.
	Enabled *bool `json:"enabled,omitempty"`
	Repository *Repository `json:"repository,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PipelinesConfiguration PipelinesConfiguration

// NewPipelinesConfiguration instantiates a new PipelinesConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelinesConfiguration() *PipelinesConfiguration {
	this := PipelinesConfiguration{}
	return &this
}

// NewPipelinesConfigurationWithDefaults instantiates a new PipelinesConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelinesConfigurationWithDefaults() *PipelinesConfiguration {
	this := PipelinesConfiguration{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PipelinesConfiguration) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelinesConfiguration) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PipelinesConfiguration) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PipelinesConfiguration) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *PipelinesConfiguration) GetRepository() Repository {
	if o == nil || o.Repository == nil {
		var ret Repository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelinesConfiguration) GetRepositoryOk() (*Repository, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *PipelinesConfiguration) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given Repository and assigns it to the Repository field.
func (o *PipelinesConfiguration) SetRepository(v Repository) {
	o.Repository = &v
}

func (o PipelinesConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PipelinesConfiguration) UnmarshalJSON(bytes []byte) (err error) {
	varPipelinesConfiguration := _PipelinesConfiguration{}

	if err = json.Unmarshal(bytes, &varPipelinesConfiguration); err == nil {
		*o = PipelinesConfiguration(varPipelinesConfiguration)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "repository")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePipelinesConfiguration struct {
	value *PipelinesConfiguration
	isSet bool
}

func (v NullablePipelinesConfiguration) Get() *PipelinesConfiguration {
	return v.value
}

func (v *NullablePipelinesConfiguration) Set(val *PipelinesConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelinesConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelinesConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelinesConfiguration(val *PipelinesConfiguration) *NullablePipelinesConfiguration {
	return &NullablePipelinesConfiguration{value: val, isSet: true}
}

func (v NullablePipelinesConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelinesConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


